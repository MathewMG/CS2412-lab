#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int data;
    struct Node* next;
} Node;
void push(Node** top, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Stack Overflow\n");
        return;
    }
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}
int pop(Node** top) {
    if (*top == NULL) {
        return -1; // Stack is empty
    }
    Node* temp = *top;
    int popped = temp->data;
    *top = (*top)->next;
    free(temp);
    return popped;
}
int isEmpty(Node* top) {
    return (top == NULL);
}
typedef struct {
    Node* stack1;
    Node* stack2;
} MyQueue;
MyQueue* myQueueCreate() {
    MyQueue* q = (MyQueue*)malloc(sizeof(MyQueue));
    q->stack1 = NULL;
    q->stack2 = NULL;
    return q;
}
void myQueuePush(MyQueue* obj, int x) {
    push(&(obj->stack1), x);
}
int myQueuePop(MyQueue* obj) {
    if (isEmpty(obj->stack1) && isEmpty(obj->stack2)) {
        return -1; // Queue is empty
    }

    if (isEmpty(obj->stack2)) {
        while (!isEmpty(obj->stack1)) {
            push(&(obj->stack2), pop(&(obj->stack1)));
        }
    }
    return pop(&(obj->stack2));
}
int myQueuePeek(MyQueue* obj) {
    if (isEmpty(obj->stack1) && isEmpty(obj->stack2)) {
        return -1; // Queue is empty
    }

    if (isEmpty(obj->stack2)) {
        while (!isEmpty(obj->stack1)) {
            push(&(obj->stack2), pop(&(obj->stack1)));
        }
    }
    return obj->stack2->data;
}
int myQueueEmpty(MyQueue* obj) {
    return (isEmpty(obj->stack1) && isEmpty(obj->stack2));
}
void myQueueFree(MyQueue* obj) {
    while (!isEmpty(obj->stack1)) {
        pop(&(obj->stack1));
    }
    while (!isEmpty(obj->stack2)) {
        pop(&(obj->stack2));
    }
    free(obj);
}
int main() {
    MyQueue* myQueue = myQueueCreate();
    myQueuePush(myQueue, 1);
    myQueuePush(myQueue, 2);
    printf("Peek: %d\n", myQueuePeek());  // Should return 1
    printf("Pop: %d\n", myQueuePop());    // Should return 1
    printf("Empty: %d\n", myQueueEmpty()); // Should return 0 (false)
    myQueueFree(myQueue); // Free allocated memory
    return 0;
}
